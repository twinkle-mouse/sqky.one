---
import { getMaterialFileIcon, getMaterialFolderIcon } from "file-extension-icon-js";

import type { FileEntry } from "$lib/page";

export type Props = {
    entry: FileEntry;
};

const { entry } = Astro.props;
const url = new URL(Astro.request.url);
if (!url.pathname.endsWith("/")) {
    url.pathname += "/";
}

function formatBytes(bytes: number, precision: number = 4) {
    const k = 1000;
    const units = [" B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    if (bytes < k) return `${bytes.toString().padStart(precision)} ${units[0]}`;

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    const num = (bytes / Math.pow(k, i)).toPrecision(precision);
    const unit = units[i];

    return `${num.toString().padStart(precision)} ${unit}`;
}

let suffix = "";
if (entry.isDir) {
    suffix += "/";
}

let icon = null;
if (entry.isDir) {
    icon = getMaterialFolderIcon("folder");
}
if (entry.isFile) {
    icon = getMaterialFileIcon(entry.name);
}
---

<tr>
    <td><img src={icon} /><a href={URL.parse(`${entry.name}${suffix}`, url)?.pathname}>{`${entry.name}${suffix}`}</a></td>
    <td class="mono">{formatBytes(entry.size)}</td>
    <td class="mono">{entry.mtime.toISOString()}</td>
</tr>

<style>
    img {
        display: inline-block;
        width: 1.5em;
        height: 1.5em;
        vertical-align: -0.4em;
        margin-right: 0.25em;
    }

    td {
        white-space: pre;
    }
</style>
